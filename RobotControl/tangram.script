def tangram():
  global _hidden_verificationVariable=0
  step_count_db7e2ba1_768e_41b9_b864_9cb906d3e9ec = 0.0
  thread Step_Counter_Thread_2f016573_aed3_4589_8248_1173e7b7066e():
    while (True):
      step_count_db7e2ba1_768e_41b9_b864_9cb906d3e9ec = step_count_db7e2ba1_768e_41b9_b864_9cb906d3e9ec + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_2f016573_aed3_4589_8248_1173e7b7066e()
  set_target_payload(0.800000, [-0.007000, -0.023000, 0.041000], [0.001061, 0.001061, 0.001061, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: rs485, 1.0.0, FZI Research Center for Information Technology
  #   Type: RS485
  global rs485=rpc_factory("xmlrpc", "http://127.0.0.1:40404/RPC2")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 3.19.1.111718, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckslave_id = 1
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    slave_id = vacuumGripCheckslave_id
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected_by_slave_id(slave_id=9)):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected_by_slave_id(slave_id=9)):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(slave_id=9):
    vacuumGripCheckslave_id = slave_id
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpslave_id = 0
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    slave_id = stopPumpslave_id
    stopPumpThreadStarted[rq_slave_id_to_index(slave_id)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(slave_id_to_gripper_socket(slave_id))
  
    stopPumpThreadStarted[rq_slave_id_to_index(slave_id)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, slave_id=9):
    if (stopPumpThreadStarted[rq_slave_id_to_index(slave_id)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpslave_id = slave_id
    stopPumpThreadHandles[rq_slave_id_to_index(slave_id)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(slave_id)
    return stopPumpThreadHandles[rq_slave_id_to_index(slave_id)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(slave_id=9):
    while (not(stopPumpThreadStarted[rq_slave_id_to_index(slave_id)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(slave_id=9):
    handle = stopPumpThreadHandles[rq_slave_id_to_index(slave_id)]
    threadIsRunning = stopPumpThreadStarted[rq_slave_id_to_index(slave_id)]
    if (threadIsRunning):
      kill handle
      stopPumpThreadHandles[rq_slave_id_to_index(slave_id)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(slave_id=9):
      while (not rq_is_vacuum_obj_detected_by_slave_id(slave_id)):
          if (rq_is_vacuum_timeout(slave_id)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(slave_id=9):
      while (not rq_is_vacuum_obj_secured(slave_id)):
          if (rq_is_vacuum_timeout(slave_id)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(slave_id=9):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(slave_id) and
             not rq_is_vacuum_obj_detected_by_slave_id(slave_id) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(slave_id)):
          if (rq_is_vacuum_timeout(slave_id)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(slave_id=9):
      while (rq_is_vacuum_obj_detected_by_slave_id(slave_id)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected_by_slave_id(slave_id=9):
      gOBJ = driver_gripper_client.getObjectDetectionFlag(slave_id)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      return rq_is_vacuum_obj_detected_by_slave_id(slave_id)
  end
  
  def rq_is_vacuum_obj_secured(slave_id=9):
      gOBJ = driver_gripper_client.getObjectDetectionFlag(slave_id)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(slave_id=9):
      gOBJ = driver_gripper_client.getObjectDetectionFlag(slave_id)
      return is_vacuum_OBJ_object_in_motion(gOBJ)
  end
  
  def rq_is_vacuum_timeout(slave_id=9):
      gFLT = driver_gripper_client.getFault(slave_id)
      return gFLT == 6
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      return gOBJ == 0
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      return gOBJ == 1 or gOBJ == 2
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      return gOBJ == 2
  end
  
  def rq_set_vacuum_and_wait(pressure, timeout, minimum, advanced_mode, slave_id=9):
      driver_gripper_client.configureVacuum(slave_id, advanced_mode, pressure, minimum, timeout)
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    rq_wait_for_gripper_reconnection()
    local slave_id = gripper_socket_to_slave_id(gripper_socket)
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, slave_id)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, slave_id):
    rq_reset_fault_and_activate(slave_id)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, slave_id)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, slave_id)
    end
  
    # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
    # the communication driver reset the GTO bit
    driver_gripper_client.goto(slave_id, 1)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected_by_slave_id(slave_id)):
  
        if advanced_mode:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, slave_id)
        else:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, slave_id)
        end
  
        # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
        # the communication driver reset the GTO bit
        driver_gripper_client.goto(slave_id, 1)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, slave_id)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    rq_wait_for_gripper_reconnection()
    local slave_id = gripper_socket_to_slave_id(gripper_socket)
    local pressure = floor(scale(maximum_vacuum, [0, 100], [100, 0]))
    local minimum = floor(scale(minimum_vacuum, [0, 100], [100, 0]))
    local timeout = floor(scale(timeout_ms, [0, 25500], [0, 255]))
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, slave_id)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(slave_id)
          if(not suction_completed):
            driver_gripper_client.goto(slave_id, 0)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, slave_id):
    stopStopPumpOnDistanceTravelledThread(slave_id)
    rq_reset_fault_and_activate(slave_id)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, slave_id)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, slave_id)
    end
  
    driver_gripper_client.goto(slave_id, 1)
  end
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    return gFLT == 6
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def rq_reset_fault_and_activate(slave_id):
      gFLT = driver_gripper_client.getFault(slave_id)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              driver_gripper_client.goto(slave_id, 0)
          elif(is_FLT_faulted(gFLT)):
              driver_gripper_client.goto(slave_id, 0)
              driver_gripper_client.activate([slave_id], True)
          end
      elif(not rq_is_gripper_activated(slave_id)):
          driver_gripper_client.goto(slave_id, 0)
          driver_gripper_client.activate([slave_id], False)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
    def scale(value, rawRange, scaledRange):
        def computeSlope(inputRange, outputRange):
            outputRangeDelta = outputRange[1] - outputRange[0]
            inputRangeDelta = inputRange[1] - inputRange[0]

            if (inputRangeDelta == 0):
                return 0
            else:
                return outputRangeDelta / inputRangeDelta
            end
        end

        def computeIntercept(slope, inputRange, outputRange):
            return outputRange[0] - (slope * inputRange[0])
        end

        def clipScaledValue(outputScaledValue, outputRange):
            if (outputRange[0] < outputRange[1]):
                return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
            else:
                return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
            end
        end

        def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
            if (outputScaledValue < outputRange[1]):
                return outputRange[1]
            elif (outputScaledValue > outputRange[0]):
                return outputRange[0]
            else:
                return outputScaledValue
            end
        end

        def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
            if (outputScaledValue < outputRange[0]):
                return outputRange[0]
            elif (outputScaledValue > outputRange[1]):
                return outputRange[1]
            else:
                return outputScaledValue
            end
        end

        slope = computeSlope(rawRange, scaledRange)
        intercept = computeIntercept(slope, rawRange, scaledRange)
        scaledValue = slope * value + intercept
        return clipScaledValue(scaledValue, scaledRange)
    end

    def limit(value, range):
        return scale(value, range, range)
    end

  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 3.19.1.111718, Robotiq Inc.
  #   Type: Gripper
  RQ_UNIT_PERCENT = 0
  RQ_UNIT_MM = 1
  RQ_UNIT_INCH = 2
  
  global gripper_reconnecting = False
  rq_current_limit_enabled = False
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  driver_gripper_client = rpc_factory("xmlrpc","http://127.0.0.1:63353")
  
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      rq_wait_for_gripper_reconnection()
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      rq_set_force_norm_multi_grippers(force_norm, [slave_id])
  end
  
  def rq_set_force_norm_multi_grippers(force_norm, slave_ids=[9]):
      driver_gripper_client.setForce(slave_ids, force_norm)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      rq_wait_for_gripper_reconnection()
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      rq_set_speed_norm_multi_grippers(speed_norm, [slave_id])
  end
  
  def rq_set_speed_norm_multi_grippers(speed_norm, slave_ids=[9]):
      driver_gripper_client.setSpeed(slave_ids, speed_norm)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_wait_for_gripper_reconnection()
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      driver_gripper_client.openGripper(slave_id)
      rq_wait_for_motion_complete([slave_id])
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_wait_for_gripper_reconnection()
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      driver_gripper_client.closeGripper(slave_id)
      rq_wait_for_motion_complete([slave_id])
  end
  
  def rq_move_norm_multi_grippers(position, slave_ids=[9]):
     # rq_wait_for_gripper_reconnection fucntion is not called here because it is already done in the gripper contribution
     # script and this function is not defined for public usage.
     all_gripper_limits = get_all_gripper_limits(slave_ids)
     driver_gripper_client.move(slave_ids, position, RQ_UNIT_PERCENT, all_gripper_limits)
  end
  
  def rq_move_and_wait_norm_multi_grippers(position, slave_ids=[9]):
       all_gripper_limits = get_all_gripper_limits(slave_ids)
       driver_gripper_client.move(slave_ids, position, RQ_UNIT_PERCENT, all_gripper_limits)
       rq_wait_for_motion_complete(slave_ids)
  end
  
  def rq_move_and_wait(position, unit, gripper_socket="1"):
     rq_wait_for_gripper_reconnection()
     slave_id = gripper_socket_to_slave_id(to_str(gripper_socket))
     all_gripper_limits = get_all_gripper_limits([slave_id])
     driver_gripper_client.move([slave_id], position, unit, all_gripper_limits)
     rq_wait_for_motion_complete([slave_id])
  end
  
  def rq_move_and_wait_norm(position, gripper_socket="1"):
      rq_move_and_wait(position, RQ_UNIT_PERCENT, gripper_socket)
  end
  
  def rq_move_and_wait_mm(position, gripper_socket="1"):
      rq_move_and_wait(position, RQ_UNIT_MM, gripper_socket)
  end
  
  def rq_move_and_wait_inches(position, gripper_socket="1"):
     rq_move_and_wait(position, RQ_UNIT_INCH, gripper_socket)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
     slave_id = gripper_socket_to_slave_id(gripper_socket)
     return driver_gripper_client.isObjectDetected(slave_id)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      gripper_limits = get_gripper_limits(gripper_socket)
      return driver_gripper_client.getCurrentPosition(slave_id,
                                    RQ_UNIT_PERCENT,
                                    gripper_limits[0],
                                    gripper_limits[1],
                                    gripper_limits[2],
                                    gripper_limits[3])
  end
  
  def rq_current_pos_mm(gripper_socket=1):
      slave_id = gripper_socket_to_slave_id(to_str(gripper_socket))
      gripper_limits = get_gripper_limits(to_str(gripper_socket))
      return driver_gripper_client.getCurrentPosition(slave_id,
                                    RQ_UNIT_MM,
                                    gripper_limits[0],
                                    gripper_limits[1],
                                    gripper_limits[2],
                                    gripper_limits[3])
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      slave_id = gripper_socket_to_slave_id(to_str(gripper_socket))
      gripper_limits = get_gripper_limits(to_str(gripper_socket))
      return driver_gripper_client.getCurrentPosition(slave_id,
                                    RQ_UNIT_INCH,
                                    gripper_limits[0],
                                    gripper_limits[1],
                                    gripper_limits[2],
                                    gripper_limits[3])
  end
  
  def rq_reset(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      driver_gripper_client.deactivate([slave_id])
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_wait_for_gripper_reconnection()
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      driver_gripper_client.setMaximumCurrent(current_mA, slave_id)
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      return driver_gripper_client.getMaximumCurrent(slave_id)
  end
  
  def rq_set_max_current_for_all_grippers():
      rq_wait_for_gripper_reconnection()
      driver_gripper_client.setMaximumCurrentOnAllGrippers(rq_current_limit_enabled)
  end
  
  def rq_is_gripper_activated(slave_id=9):
      return driver_gripper_client.isGripperActivated(slave_id)
  end
  
  def rq_is_gripper_connected(slave_id=9):
      return driver_gripper_client.isGripperConnected(slave_id)
  end
  
  def rq_get_fault(slave_id=9):
      return driver_gripper_client.getFault(slave_id)
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      if (not rq_is_gripper_activated(slave_id)):
        driver_gripper_client.activate([slave_id], False)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      empty_array_used_to_act_on_all_grippers = []
      if (reset):
        driver_gripper_client.activate(empty_array_used_to_act_on_all_grippers, True)
      else:
        driver_gripper_client.activateIfRequired(empty_array_used_to_act_on_all_grippers)
      end
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[rq_gripper_socket_to_index(gripper_socket)]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[rq_gripper_socket_to_index(gripper_socket)]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[rq_gripper_socket_to_index(gripper_socket)]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[rq_gripper_socket_to_index(gripper_socket)]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[rq_gripper_socket_to_index(gripper_socket)] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[rq_gripper_socket_to_index(gripper_socket)] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[rq_gripper_socket_to_index(gripper_socket)] = closed_mm
  end
  
  def set_open_mm(opened_mm, gripper_socket):
      gripper_open_mm[rq_gripper_socket_to_index(gripper_socket)] = opened_mm
  end
  
  def slave_id_to_gripper_socket(slave_id):
      if slave_id == 9:
          return "1"
      else:
          return to_str(slave_id)
      end
  end
  
  def gripper_socket_to_slave_id(gripper_socket):
      if gripper_socket == "1":
          return 9
      else:
          return to_num(gripper_socket)
      end
  end
  
  def rq_slave_id_to_index(slave_id):
      if slave_id == 9:
          return 0
      else:
          return slave_id - 1
      end
  end
  
  def rq_gripper_socket_to_index(gripper_socket):
      return to_num(gripper_socket) - 1
  end
  
  def get_all_gripper_limits(slave_ids):
     all_gripper_limits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     nb_slave_ids = get_list_length(slave_ids)
     slave_id_index = 0
     index = 0
     sub_index = 0
     while (index < nb_slave_ids):
         slave_id_index = 0
         items_per_limit = 4
         gripper_socket = slave_id_to_gripper_socket(slave_ids[index])
         gripper_limits = get_gripper_limits(gripper_socket)
         while (sub_index < items_per_limit):
            all_gripper_limits[index] = gripper_limits[sub_index]
            sub_index = sub_index + 1
            index = index + 1
         end
         index = index + 1
     end
  
     return all_gripper_limits
  end
  
  def get_gripper_limits(gripper_socket):
      return [get_closed_norm(gripper_socket),
              get_open_norm(gripper_socket),
              get_closed_mm(gripper_socket),
              get_open_mm(gripper_socket)]
  end
  
  def rq_wait_for_motion_complete(slave_ids):
      nb_slave_ids = get_list_length(slave_ids)
      index = 0
      while (index < nb_slave_ids):
        rq_wait(slave_ids[index])
        index = index + 1
      end
  end
  
  def rq_stop(gripper_socket="1"):
      slave_id = gripper_socket_to_slave_id(gripper_socket)
      driver_gripper_client.goto(slave_id, 0)
  end
  
  def rq_wait(slave_id):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(slave_id)):
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          driver_gripper_client.goto(slave_id, 1)
          sleep(0.1)
      end
  end
  
  def rq_is_motion_complete(slave_id):
      detection_flag = driver_gripper_client.getObjectDetectionFlag(slave_id)
      return detection_flag > 0 and detection_flag < 4
  end
  
  def write_error_popup(index, message_part_1, message_part_2, title):
      popup_message_part_1 = str_cat(message_part_1, index)
      popup_message_part_2 = str_cat(popup_message_part_1, " ")
      popup_message = str_cat(popup_message_part_2, message_part_2)
      return popup(popup_message, title, False, True, True)
  end
  
  def rq_disconnect_grippers():
      driver_gripper_client.pauseAndDisconnect()
  end
  
  def rq_reconnect_grippers(blocking=False, slave_ids=[]):
      if blocking:
          global gripper_reconnecting = True
          driver_gripper_client.reconnectAndResume(slave_ids)
          gripper_reconnecting = False
      else:
          thread recon_thread():
              rq_reconnect_grippers(True)
              return False
          end
          thrd = run recon_thread()
      end
  end
  
  def rq_wait_for_gripper_reconnection(timeout_s = 30.0):
      while (gripper_reconnecting == True):
          if (timeout_s <= 0):
            popup("Gripper has not reconnected before the expected time")
            halt
          else:
            sync()
            timeout_s = timeout_s - get_steptime()
          end
      end
  end
  
  def rq_gripper_allow_tool_com(allow_tool_comm):
      driver_gripper_client.allowToolComm(allow_tool_comm)
  end
  set_closed_norm(100.0, "1")
  set_open_norm(0.0, "1")
  set_closed_mm(0.0, "1")
  set_open_mm(50.0, "1")
  set_closed_norm(100.0, "2")
  set_open_norm(0.0, "2")
  set_closed_mm(0.0, "2")
  set_open_mm(50.0, "2")
  set_closed_norm(100.0, "3")
  set_open_norm(0.0, "3")
  set_closed_mm(0.0, "3")
  set_open_mm(50.0, "3")
  set_closed_norm(100.0, "4")
  set_open_norm(0.0, "4")
  set_closed_mm(0.0, "4")
  set_open_mm(50.0, "4")
  rq_current_limit_enabled = False
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: PART LOCALIZATION WITH SICK PLOC2D, 3.0.0.100, SICK AG - Developed by Nimalendiran Kailasanathan
  #   Type: PLOC2D HELP
  global PLOC2D_CONNECTION = "NOT CONNECTED"
  global ANYFEEDER_CONNECTION = "NOT CONNECTED"
  global PLOC2D_STATUS = "Job(s) not located."
  global PLOC_LOCATED = False
  global PLOC_IS_WITHIN_REACH = False
  global PLOC2D_JOB_ID = 0
  global PLOC2D_LOCATE_TRIALS = 0
  global PLOC2D_URPose = p[0,0,0,0,0,0]
   def ploc2d_wrist(pose,jRefPose,activeTCP):
			jJoints=get_inverse_kin(pose,jRefPose,1e-10,1e-10,activeTCP)
			return jJoints
	end
   def ploc_wrist_pose(pose,jRefPose,activeTCP):
			jJoints=get_inverse_kin(pose,jRefPose,1e-10,1e-10,activeTCP)
			finalPose=get_forward_kin(jJoints,activeTCP)
			return finalPose
	end
		def PLOC2D_SendString(PLOC2D_string): #Function to send a string over the socket. INPUT: string to send 
			PLOC2D_sent=False 
			#textmsg("string",PLOC2D_string) 
			PLOC2D_sent=socket_send_line(PLOC2D_string, "Sick_Ploc_Socket") 
			sleep(0.01)  
			if not PLOC2D_sent: 
	  			popup("Failed to send string message","Message Transmission Failure",False,True,blocking=True)  
			end 
		end 
		def PLOC2D_SendStringToAnyfeeder(PLOC2D_AnyfeederString): #Function to send a string over the socket. INPUT: string to send 
			PLOC2D_AnyfeederSent=False 
			#textmsg("string",PLOC2D_AnyfeederString) 
			PLOC2D_AnyfeederSent=socket_send_string(PLOC2D_AnyfeederString, "Anyfeeder_Socket") 
			sleep(0.01)  
			if not PLOC2D_AnyfeederSent: 
	  			popup("Failed to send string message","Message Transmission Failure",False,True,blocking=True)  
			end 
		end 
		def PLOC2D_convertPose(PoseFromPLOC): #Function to convert the frames from a list with millimiters, and RPY angles in degrees data (as returned by PLOC2D_) to a pose variable (meters, radians, axis angle notation) as used by the UR robot. INPUT=list (length 6) with frame format from PLOC2D_ (mm, RPY angles in degrees). OUTPUT=UR robot pose. 
			PLOC2D_rotRPY=[0,0,0] 
			PLOC2D_rotRPY[0]=d2r(PoseFromPLOC[5])  #Rx 
			PLOC2D_rotRPY[1]=d2r(PoseFromPLOC[6])  #Ry 
			PLOC2D_rotRPY[2]=d2r(PoseFromPLOC[7])  #Rz 
			PLOC2D_rotVec=rpy2rotvec(PLOC2D_rotRPY) 
			PLOC2D_convertedPose=p[PoseFromPLOC[2]/1000,PoseFromPLOC[3]/1000,PoseFromPLOC[4]/1000,PLOC2D_rotVec[0],PLOC2D_rotVec[1],PLOC2D_rotVec[2]] 
			return PLOC2D_convertedPose 
		end 
		def PLOC2D_LocatePart(PLOC2D_command): #Function to ask PLOC2D_ to locate a part. INPUT= string PLOC2D_ job Alias. OUTPUT=list with received part result data 
			#PLOC2D_command = "Run.Locate,1" 
           PLOC2D_located = "Run.Locate.Ok" 
			#textmsg("sent",PLOC2D_command) 
			PLOC2D_SendString(PLOC2D_command) 
       	#sleep(0.2) 
			PLOC2D_receivedPartMsg=socket_read_string("Sick_Ploc_Socket","","",False,120) 
					#textmsg(PLOC2D_receivedPartMsg) 
			PLOC2D_delimiter = "," 
			PLOC2D_l=0 
			l_token =0 
			PLOC2D_ok=-1 
			PLOC2D_data=[0,0,0,0,0,0,0,0,0] 
			PLOC2D_pos=0 
			PLOC2D_token=" " 
			s_length = str_len(PLOC2D_receivedPartMsg) 
			first=True 
			while PLOC2D_ok!= 0: 
				PLOC2D_pos = str_find(PLOC2D_receivedPartMsg,PLOC2D_delimiter) 
				if PLOC2D_pos==-1: 
					PLOC2D_token = PLOC2D_receivedPartMsg 
					PLOC2D_ok=0 
					#textmsg(PLOC2D_data) 
				else: 
					PLOC2D_token = str_sub(PLOC2D_receivedPartMsg,0,PLOC2D_pos) 
					l_token = str_len(PLOC2D_token) 
					PLOC2D_receivedPartMsg=str_sub(PLOC2D_receivedPartMsg,l_token+1,s_length) 
				end 
				if first: 
					first=False 
					if PLOC2D_token == PLOC2D_located: 
						PLOC2D_data[0]=1 
					else: 
						PLOC2D_data[0]=0 
						break 
					end 
				end 
				if PLOC2D_l == 1: 
					PLOC2D_data[1] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 4: 
					PLOC2D_data[2] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 5: 
					PLOC2D_data[3] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 6: 
					PLOC2D_data[4] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 7: 
					PLOC2D_data[5] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 8: 
					PLOC2D_data[6] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 9: 
					PLOC2D_data[7] = to_num(PLOC2D_token) 
				elif PLOC2D_l == 3: 
					PLOC2D_data[8] = to_num(PLOC2D_token) 
				end 
				PLOC2D_l=PLOC2D_l+1 
			end 
			return PLOC2D_data 
		end 
		def PLOC2D_extractPose(PLOC2D_PartData):  #Function extracting a meaningful pose from the part result data obtained from PLOC. 
			PLOC2D_correctionFrame=PLOC2D_PartData 
			PLOC2D_correctionFrame[2]=PLOC2D_PartData[2]/1 
			PLOC2D_correctionFrame[3]=PLOC2D_PartData[3]/1 
			PLOC2D_correctionFrame[4]=PLOC2D_PartData[4]/1 
			PLOC2D_URPose=PLOC2D_convertPose(PLOC2D_correctionFrame) 
			return PLOC2D_URPose 
		end 
		def PLOC2D_getCorrectedPickPose(PLOC2D_PartData,PLOC_AlignmentF): 
			PLOC2D_correctionFrame=PLOC2D_extractPose(PLOC2D_PartData) 
			PLOC2D_correctedFrame=pose_trans(PLOC_AlignmentF,PLOC2D_correctionFrame) 
			#textmsg(PLOC2D_correctedFrame) 
			return PLOC2D_correctedFrame 
		end 
		def Connect_To_ANYFEEDER(PLOC2D_ip,PLOC2D_port): #Function to establish socket connection with PLOC 
			PLOC2D_AnyfeederConnected = False 
			PLOC2D_AnyfeederCounter=0 
			while not PLOC2D_AnyfeederConnected and (PLOC2D_AnyfeederCounter<100): 
	  			PLOC2D_AnyfeederConnected=socket_open(PLOC2D_ip,PLOC2D_port,"Anyfeeder_Socket") 
	  			PLOC2D_AnyfeederCounter=PLOC2D_AnyfeederCounter+1 
			end 
			if PLOC2D_AnyfeederCounter>=100: 
	  			popup("Connection to anyfeeder failed","Time out",False,True,blocking=True) 
	  			halt 
			else: 
	  			#textmsg("Connected to Anyfeeder") 
				ANYFEEDER_CONNECTION = "Connected to Anyfeeder" 			end 
		end	 
		def Connect_To_PLOC(PLOC2D_ip,PLOC2D_port): #Function to establish socket connection with PLOC 
			PLOC2D_Connected = False 
			PLOC2D_counter=0 
			while not PLOC2D_Connected and (PLOC2D_counter<100): 
	  			PLOC2D_Connected=socket_open(PLOC2D_ip,PLOC2D_port,"Sick_Ploc_Socket") 
	  			PLOC2D_counter=PLOC2D_counter+1 
			end 
			if PLOC2D_counter>=100: 
	  			popup("Connection to PLOC failed","Time out",False,True,blocking=True) 
	  			halt 
			else: 
	  			#textmsg("Connected to PLOC") 
				PLOC2D_CONNECTION = "Connected to PLOC2D_" 			end 
		end	 
		def DISCONNECT_To_PLOC(): #Function to disconnect socket connection with PLOC 
			socket_close("Sick_Ploc_Socket") 
		end	 
		def DISCONNECT_To_ANYFEEDER(): #Function to disconnect socket connection with PLOC 
			socket_close("Anyfeeder_Socket") 
		end	 
		def PLOC2D_sendToAnyfeed(PLOC2D_AnyfeederCommand): #Function to ask PLOC2D_ to locate a part. INPUT= string PLOC2D_ job Alias. OUTPUT=list with received part result data 
			PLOC2D_SendStringToAnyfeeder(PLOC2D_AnyfeederCommand) 
       	#sleep(0.2) 
			PLOC2D_AnyfeederReceivedPartMsg=socket_read_string("Anyfeeder_Socket","","",False,120) 
			#textmsg(PLOC2D_AnyfeederReceivedPartMsg) 
			return PLOC2D_AnyfeederReceivedPartMsg 
		end	 
  # end: URCap Installation Node
  global PLOC_Ref_1=[0.000000,-1.570800,-1.570800,-1.745330,1.570800,1.570800]
  global PLOC_clear_1=p[0,0,0,0,0,0]
  global PLOC_pick_1=p[0,0,0,0,0,0]
  global PLOC_prepick_1=[0,0,0,0,0,0]
  global PLOC_total_1=0
  global Start_1_p=p[.319720646656, -.124547278601, .199300948358, 2.344985556532, -2.083391483278, -.014266831360]
  global Start_1_q=[0.02734375, -1.1739116174033661, -2.1864588260650635, -1.3630748254111786, 1.5766428709030151, -0.09074193636049444]
  global Place_1_p=p[.319731686240, -.124545864018, .199306917430, 2.345021047743, -2.083356450099, -.014261575479]
  global Place_1_q=[0.027347344905138016, -1.1739344459823151, -2.186431407928467, -1.363074780707695, 1.5766428709030151, -0.09077006975282842]
  $ 2 "BeforeStart"
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 3.19.1.111718, Robotiq Inc.
  #   Type: Gripper Activate
  $ 3 "Gripper Activate"
  
  rq_set_max_current_for_all_grippers()
  
  reset_and_activate = False
  
  rq_activate_all_grippers(False)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 3.19.1.111718, Robotiq Inc.
  #   Type: Gripper
  $ 4 "Gripper Open (1)"
  gripper_slave_ids_0 = [9]
  popupErrorGripperWord = "Gripper"
  popupErrorNoConnection1 = "must be connected to run this program."
  popupErrorNoConnection2 = "No connection"
  popupErrorNotActivated1 = "is not activated. Go to Installation tab > Gripper to activate it and run the program again."
  popupErrorNotActivated2 = "Not activated"
  rq_gripper_speed = 100.0
  rq_gripper_force = 100.0
  rq_gripper_position = 0.0
  rq_is_blocking = True
  rq_is_robot_compliant = False
  nb_slave_ids = get_list_length(gripper_slave_ids_0)
  rq_wait_for_gripper_reconnection()
  index = 0
  while (index < nb_slave_ids):
      if (not rq_is_gripper_connected(gripper_slave_ids_0[index])):
          write_error_popup(index, popupErrorGripperWord, popupErrorNoConnection1, popupErrorNoConnection2)
      end
      index = index + 1
  end
  index = 0
  while (index < nb_slave_ids):
      if (not rq_is_gripper_activated(gripper_slave_ids_0[index])):
          write_error_popup(index, popupErrorGripperWord, popupErrorNotActivated1, popupErrorNotActivated2)
      end
      index = index + 1
  end
  rq_set_speed_norm_multi_grippers(rq_gripper_speed, gripper_slave_ids_0)
  rq_set_force_norm_multi_grippers(rq_gripper_force, gripper_slave_ids_0)
  if (rq_is_blocking):
      if rq_is_robot_compliant:
          zero_ftsensor()
          sleep(0.02)
          # Maximum allowed deviation values for non-compliant axes are default values generated by UR in a Force node
          force_mode(tool_pose(), [1, 1, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2, [0.15, 0.15, 0.1, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
      end
      rq_move_and_wait_norm_multi_grippers(rq_gripper_position, gripper_slave_ids_0)
      if rq_is_robot_compliant:
          end_force_mode()
      end
  else:
      rq_move_norm_multi_grippers(rq_gripper_position, gripper_slave_ids_0)
  end
  # end: URCap Program Node
  $ 5 "Robot Program"
  # begin: URCap Program Node
  #   Source: PART LOCALIZATION WITH SICK PLOC2D, 3.0.0.100, SICK AG - Developed by Nimalendiran Kailasanathan
  #   Type: PLOC2D
  $ 6 "PLOC2D"
  activeTCP =p[0.0,0.0,0.17,0.0,0.0,0.0]
  PLOC_Ref_1=[0.027340,-1.173890,-2.186430,-1.363120,1.576640,-0.090740]
  PLOC2D_STATUS = "Job(s) not located."
  PLOC2D_JOB_ID = 0
  PLOC_LOCATED = False
  PLOC_IS_WITHIN_REACH = False
  isPickAll =0
  PLOC2D_LOCATE_TRIALS = 0
  PLOC2D_ip ="192.168.65.216"
  Connect_To_PLOC(PLOC2D_ip,14158)
  global PLOC2D_AlignmentFrame = p[0.46398,0.22027,0.00701,-2.30854,-2.04365,-0.08176]
   PLOC2D_Timeout = 0
   enableAnyfeeder = 0
   enableLimitRotation = 0
  current_part_to_pick = 1
		alllocatedPartsSetOk=0
		PLOC2D_partLocated=0
 		ploc_located_parts=PLOC_total_1 
		ploc_matches= 
                   textmsg("PLOC2D_Timeout: ",PLOC2D_Timeout) 
	while PLOC2D_partLocated == 0:
					  	if isPickAll == 0: 
							ploc_located_parts = 1 
						end 
				if (ploc_located_parts > 1): 
					textmsg("current_part_to_pick: ",current_part_to_pick)
					textmsg("ploc_matches: ",ploc_matches)
        			runcmd = "Run.Locate, 1 1 3 2 4 5 " 
					next_to_pick=ploc_matches-ploc_located_parts+2 
					textmsg("next to pick: ",next_to_pick) 
					PLOC2D_Matches = str_cat(str_cat(runcmd,","),to_str(next_to_pick)) #specify the job to receive from PLOC 
					PLOC2D_PartData=PLOC2D_LocatePart(PLOC2D_Matches) 
 					ploc_located_parts = ploc_located_parts-1 
 					current_part_to_pick = current_part_to_pick+1 
				else: 
					PLOC2D_PartData=PLOC2D_LocatePart("Run.Locate, 1 1 3 2 4 5 ") 
          			ploc_located_parts = PLOC2D_PartData[8] #get the total number of located parts.
				end 
			PLOC2D_partLocated=PLOC2D_PartData[0] 
                   textmsg("ploc_located_parts: ",ploc_located_parts) 
				bOK1 = False     
		if PLOC2D_partLocated==1: 
				PLOC_LOCATED = True
				PLOC2D_status = str_cat(str_cat(" Job " ,PLOC2D_PartData[1] )," has been located.")  
				PLOC2D_JOB_ID = PLOC2D_PartData[1]  
				PLOC2D_STATUS = PLOC2D_status
				pickpoint1=get_actual_joint_positions()
				pickpoint2=get_actual_tcp_pose()
PLOC_prepick_1=pickpoint1 
PLOC_total_1=ploc_located_parts 
=PLOC2D_PartData[8] 
PLOC_pick_1=pickpoint2 
PLOC_clear_1=pickpoint2 
		    	PLOC2D_job=PLOC2D_PartData[1]
				PLOC2D_LOCATE_TRIALS = 0
				bOK1 = False
				bOK2 = False
     			PLOC2D_corrPickPose=PLOC2D_getCorrectedPickPose(PLOC2D_PartData,PLOC2D_AlignmentFrame) 
				PLOC2D_PrePick=pose_trans(PLOC2D_corrPickPose,p[0,0,-0.1,0,0,0]) 
				bOK1=get_inverse_kin_has_solution(PLOC2D_PrePick,PLOC_Ref_1,1e-10,1e-10,activeTCP) 
				if bOK1: 
					PLOC2D_PrePickJ=ploc2d_wrist(PLOC2D_PrePick,PLOC_Ref_1,activeTCP)
					bOK2=get_inverse_kin_has_solution(PLOC2D_corrPickPose,PLOC2D_PrePickJ,1e-10,1e-10,activeTCP) 
				end 
			if bOK2 and bOK1: 
				textmsg("robot is within reach: ") 
				if (enableLimitRotation == 1): 
        			rpx = 0.0
       			rpy = 0.0
       			rpz = 0.0
					theta = sqrt(PLOC2D_corrPickPose[3]*PLOC2D_corrPickPose[3] + PLOC2D_corrPickPose[4]*PLOC2D_corrPickPose[4]+PLOC2D_corrPickPose[5]*PLOC2D_corrPickPose[5])
					rAxN=[PLOC2D_corrPickPose[3]/theta, PLOC2D_corrPickPose[4]/theta, PLOC2D_corrPickPose[5]/theta]
        			px = PLOC2D_corrPickPose[0]
        			py = PLOC2D_corrPickPose[1]
        			pz = PLOC2D_corrPickPose[2]
        			rppx =rpx-px
        			rppy =rpy-py
        			rppz =rpz-pz
					zx=rAxN[0]*rAxN[2]*(1-cos(theta))+rAxN[1]*sin(theta)
					zy=rAxN[1]*rAxN[2]*(1-cos(theta))-rAxN[0]*sin(theta)
					zz=cos(theta)+rAxN[2]*rAxN[2]*(1-cos(theta))
        			zn = normalize([zx,zy,zz])
        			yx = zy*rppz-zz*rppy
        			yy = zz*rppx-zx*rppz
        			yz = zx*rppy-zy*rppx
        			yn = normalize([yx,yy,yz])
        			xx = yy*zz-yz*zy
        			xy = yz*zx-yx*zz
        			xz = yx*zy-yy*zx
        			xn = normalize([xx,xy,xz])
					thetaN=acos((xx+yy+zz-1)/2)
					rAxNew=[yz-zy,zx-xz,xy-yx]
					rAxNormNew=normalize(rAxNew)
					rAxAngleNew=[rAxNormNew[0]*thetaN,rAxNormNew[1]*thetaN,rAxNormNew[2]*thetaN]
        			PLOC2D_corrPickPose[3] = rAxAngleNew[0]
        			PLOC2D_corrPickPose[4] = rAxAngleNew[1]
        			PLOC2D_corrPickPose[5] = rAxAngleNew[2]
				end 
PLOC_prepick_1= PLOC2D_PrePickJ 
					PLOC2D_corrPickPose=ploc_wrist_pose(PLOC2D_corrPickPose,PLOC2D_PrePickJ,activeTCP)
PLOC_pick_1= PLOC2D_corrPickPose 
					PLOC2D_corrClearPose=ploc_wrist_pose(PLOC2D_PrePick,PLOC2D_PrePickJ,activeTCP)
PLOC_clear_1=PLOC2D_corrClearPose
			end 
	else: 
        	  		textmsg("Cannot reach position") 
				  	if (enableAnyfeeder == 1): 
						Connect_To_ANYFEEDER(PLOC2D_ip,2120)
       				sleep(1) 
						PLOC2D_AnyfeederReceivedPartMsg = PLOC2D_sendToAnyfeed("feed")
       				sleep(1) 
						DISCONNECT_To_ANYFEEDER()
					end 
					PLOC2D_LOCATE_TRIALS = PLOC2D_LOCATE_TRIALS+1 
					if (PLOC2D_LOCATE_TRIALS ==PLOC2D_Timeout):
						popup("No part found used all localization trials, program will stop", title="PLOC2D Localization trials!",blocking=True)
						halt
					end 
		end 
		sync() 
		end 
  DISCONNECT_To_PLOC()
  $ 7 "Pick and Place" "noBreak"
  $ 8 "Start" "noBreak"
  $ 9 "'Set start position and open gripper'" "noBreak"
  # 'Set start position and open gripper'
  $ 10 "MoveJ" "noBreak"
  $ 11 "Start_1" "noBreak"
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  movej(get_inverse_kin(Start_1_p, qnear=Start_1_q), a=1.3962634015954636, v=1.0471975511965976, r=0.01)
  $ 12 "Approach" "noBreak"
  $ 13 "MoveJ" "noBreak"
  $ 14 "PLOC_prepick_1" "noBreak"
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  movej(PLOC_prepick_1, a=1.3962634015954636, v=1.0471975511965976, r=0.01)
  $ 15 "Pick" "noBreak"
  $ 16 "MoveL" "noBreak"
  $ 17 "PLOC_pick_1" "noBreak"
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  movel(PLOC_pick_1, a=1.2, v=0.25)
  $ 18 "Clear" "noBreak"
  $ 19 "'Close gripper'" "noBreak"
  # 'Close gripper'
  $ 20 "MoveL" "noBreak"
  $ 21 "PLOC_clear_1" "noBreak"
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  movel(PLOC_clear_1, a=1.2, v=0.25, r=0.01)
  $ 22 "Place" "noBreak"
  $ 23 "'Set drop position and open gripper'" "noBreak"
  # 'Set drop position and open gripper'
  $ 24 "MoveJ" "noBreak"
  $ 25 "Place_1" "noBreak"
  set_tcp(p[0.0,0.0,0.17,0.0,0.0,0.0])
  movej(get_inverse_kin(Place_1_p, qnear=Place_1_q), a=1.3962634015954636, v=1.0471975511965976, r=0.01)
  # end: URCap Program Node
end
